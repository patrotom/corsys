/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 14.1 		*/
/*  Created On : 25-nov-2018 17:17:21 				*/
/*  DBMS       : MySql 						*/
/* ---------------------------------------------------- */

SET FOREIGN_KEY_CHECKS=0
; 
/* Drop Tables */

DROP TABLE IF EXISTS `Address` CASCADE
;

DROP TABLE IF EXISTS `Department` CASCADE
;

DROP TABLE IF EXISTS `Doctor` CASCADE
;

DROP TABLE IF EXISTS `Examination` CASCADE
;

DROP TABLE IF EXISTS `Notification` CASCADE
;

DROP TABLE IF EXISTS `Patient` CASCADE
;

DROP TABLE IF EXISTS `Receptionist` CASCADE
;

DROP TABLE IF EXISTS `Reservation` CASCADE
;

DROP TABLE IF EXISTS `Role` CASCADE
;

DROP TABLE IF EXISTS `Timetable` CASCADE
;

DROP TABLE IF EXISTS `User` CASCADE
;

/* Create Tables */

CREATE TABLE `Address`
(
	`address_id` INT NOT NULL AUTO_INCREMENT,
	`street` VARCHAR(100) NOT NULL,
	`number` VARCHAR(50) NOT NULL,
	`city` VARCHAR(100) NOT NULL,
	`zip_code` VARCHAR(50) NOT NULL,
	CONSTRAINT `PK_Address` PRIMARY KEY (`address_id` ASC)
)
COMMENT = 'Contains information about patient''s address.'

;

CREATE TABLE `Department`
(
	`department_id` INT NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	`description` VARCHAR(250) NULL,
	CONSTRAINT `PK_Department` PRIMARY KEY (`department_id` ASC)
)
COMMENT = 'Contains information about departments of the medical center.'

;

CREATE TABLE `Doctor`
(
	`doctor_id` INT NOT NULL AUTO_INCREMENT,
	`user_id` INT NULL,
	`department_id` INT NULL,
	CONSTRAINT `PK_Doctor` PRIMARY KEY (`doctor_id` ASC)
)
COMMENT = 'Represents doctor''s role within the system. Table is connected to the User table through its foreign key. Doctor also carries foreign key to the department he/she is working at.'

;

CREATE TABLE `Examination`
(
	`examination_id` INT NOT NULL AUTO_INCREMENT,
	`type` VARCHAR(100) NOT NULL,
	`length` INT NOT NULL,
	`description` VARCHAR(250) NULL,
	`department_id` INT NULL,
	CONSTRAINT `PK_Examination` PRIMARY KEY (`examination_id` ASC)
)
COMMENT = 'Information about the examination - type, its length, department and optional description. Examination is mandatory part of the reservation because it is mandatory to fill in Examination type during the creation of a reservation. Examinations are also connected to the departments so when a user is creating a reservation, only valid types of examinations will be offered by the system to choose. '

;

CREATE TABLE `Notification`
(
	`notification_id` INT NOT NULL AUTO_INCREMENT,
	`timestamp` TIMESTAMP(6) NOT NULL,
	`message` VARCHAR(50) NOT NULL,
	`state` VARCHAR(50) NOT NULL,
	`user_id` INT NULL,
	CONSTRAINT `PK_Notification` PRIMARY KEY (`notification_id` ASC)
)
COMMENT = 'Table notification holds information and state of the particular notification which is strictly connected to the specific user.'

;

CREATE TABLE `Patient`
(
	`patient_id` INT NOT NULL AUTO_INCREMENT,
	`birth_number` VARCHAR(50) NOT NULL,
	`insurance` VARCHAR(50) NOT NULL,
	`address_id` INT NULL,
	`user_id` INT NULL,
	CONSTRAINT `PK_Patient` PRIMARY KEY (`patient_id` ASC)
)
COMMENT = 'Represents patient''s role within the system. Table is connected to the User table through its foreign key.'

;

CREATE TABLE `Receptionist`
(
	`receptionist_id` INT NOT NULL AUTO_INCREMENT,
	`user_id` INT NULL,
	`department_id` INT NULL,
	CONSTRAINT `PK_Receptionist` PRIMARY KEY (`receptionist_id` ASC)
)
COMMENT = 'Represents receptionist''s role within the system. Table is connected to the User table through its foreign key. Receptionist also carries foreign key to the department he/she is working at.'

;

CREATE TABLE `Reservation`
(
	`reservation_id` INT NOT NULL AUTO_INCREMENT,
	`date` DATE NOT NULL,
	`time_from` TIME(6) NOT NULL,
	`time_to` TIME(6) NOT NULL,
	`state` VARCHAR(50) NOT NULL,
	`description` VARCHAR(250) NULL,
	`patient_id` INT NULL,
	`doctor_id` INT NULL,
	`examination_id` INT NULL,
	CONSTRAINT `PK_Reservation` PRIMARY KEY (`reservation_id` ASC)
)
COMMENT = 'Carries information about particular reservation. Each row defines some aspect of the reservation, including particular date and time interval (representing "Termín" domain from the package "Doménový model").'

;

CREATE TABLE `Role`
(
	`role_id` INT NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	CONSTRAINT `PK_Role` PRIMARY KEY (`role_id` ASC)
)
COMMENT = 'Table role holds names of roles and theirs ids. Each user is strictly defined by its role. Role specifies user''s permissions and capabilities within the system. '

;

CREATE TABLE `Timetable`
(
	`timetable_id` INT NOT NULL AUTO_INCREMENT,
	`date` DATE NOT NULL,
	`time_from` TIME(6) NOT NULL,
	`time_to` TIME(6) NOT NULL,
	`doctor_id` INT NULL,
	CONSTRAINT `PK_Timetable` PRIMARY KEY (`timetable_id` ASC)
)
COMMENT = 'Contains information about working hours defined by doctors. Each row represent some particular day. System will be capable of determining when a doctor is or is not working.'

;

CREATE TABLE `User`
(
	`user_id` INT NOT NULL AUTO_INCREMENT,
	`active` BOOL NOT NULL,
	`username` VARCHAR(50) NOT NULL,
	`password` VARCHAR(50) NOT NULL,
	`email` VARCHAR(50) NOT NULL,
	`first_name` VARCHAR(50) NOT NULL,
	`last_name` VARCHAR(50) NOT NULL,
	`phone` VARCHAR(15) NULL,
	`role_id` INT NULL,
	CONSTRAINT `PK_User` PRIMARY KEY (`user_id` ASC)
)
COMMENT = 'Table user holds main information about each user. User is defined by its id and its unique username. Each role from Role table also represents single table which carries specific information connected to the particular role. We can access role''s table using information from the Role table joining through User''s primary key.'

;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE `User` 
 ADD CONSTRAINT `username` UNIQUE (`username` ASC)
;

/* Create Foreign Key Constraints */

ALTER TABLE `Doctor` 
 ADD CONSTRAINT `FK_Doctor_Department`
	FOREIGN KEY (`department_id`) REFERENCES `Department` (`department_id`) ON DELETE Restrict ON UPDATE Restrict
;

ALTER TABLE `Doctor` 
 ADD CONSTRAINT `FK_Doctor_User`
	FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Examination` 
 ADD CONSTRAINT `FK_Examination_Department`
	FOREIGN KEY (`department_id`) REFERENCES `Department` (`department_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Notification` 
 ADD CONSTRAINT `FK_Notification_User`
	FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`) ON DELETE Restrict ON UPDATE Restrict
;

ALTER TABLE `Patient` 
 ADD CONSTRAINT `FK_Patient_Address`
	FOREIGN KEY (`address_id`) REFERENCES `Address` (`address_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Patient` 
 ADD CONSTRAINT `FK_Patient_User`
	FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Receptionist` 
 ADD CONSTRAINT `FK_Receptionist_Department`
	FOREIGN KEY (`department_id`) REFERENCES `Department` (`department_id`) ON DELETE Restrict ON UPDATE Restrict
;

ALTER TABLE `Receptionist` 
 ADD CONSTRAINT `FK_Receptionist_User`
	FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Reservation` 
 ADD CONSTRAINT `FK_Reservation_Doctor`
	FOREIGN KEY (`doctor_id`) REFERENCES `Doctor` (`doctor_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Reservation` 
 ADD CONSTRAINT `FK_Reservation_Examination`
	FOREIGN KEY (`examination_id`) REFERENCES `Examination` (`examination_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Reservation` 
 ADD CONSTRAINT `FK_Reservation_Patient`
	FOREIGN KEY (`patient_id`) REFERENCES `Patient` (`patient_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Timetable` 
 ADD CONSTRAINT `FK_Timetable_Doctor`
	FOREIGN KEY (`doctor_id`) REFERENCES `Doctor` (`doctor_id`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `User` 
 ADD CONSTRAINT `FK_User_Role`
	FOREIGN KEY (`role_id`) REFERENCES `Role` (`role_id`) ON DELETE No Action ON UPDATE No Action
;

SET FOREIGN_KEY_CHECKS=1
; 
